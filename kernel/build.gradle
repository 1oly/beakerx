/*
 *  Copyright 2017 TWO SIGMA OPEN SOURCE, LLC
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *         http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

task wrapper(type: Wrapper) {
  gradleVersion = '3.5'
}

subprojects {
  apply plugin: 'jacoco'
  apply plugin: 'java'
  apply plugin: 'maven'

  jacoco {
    toolVersion = "0.7.8"
  }
  jacocoTestReport {
    reports {
      html.enabled = true
      xml.enabled = false
      csv.enabled = false
    }
  }

  test.finalizedBy jacocoTestReport

  test {
    systemProperties 'java.awt.headless': "true"
    if (project.hasProperty('showTestOut')) {
      testLogging {
        showStandardStreams = true
      }
    }
  }
}

def windows() {
  return System.getProperty('os.name').contains('Windows')
}

def classPathSeparator() {
  if (windows()) {
    return ";"
  } else {
    return ":"
  }
}

def pathToBaseLibs() {
  return file("base/build/baseLibs").getAbsolutePath().replace("\\", "/")
}

def pathToStaticContent() {
  return '../beakerx/beakerx/static/kernel/'
}

def pathToStaticBaseLibs() {
  return file(pathToStaticContent() + "base/lib").getAbsolutePath().replace("\\", "/")
}

def createKernelJson(kernelIdName, pathToKernelLibs, pathToReplace, mainClassToReplace, pathToBaseLibs, mainClassName) {
  def jarLocation = file(pathToKernelLibs).getAbsolutePath()
  jarLocation = jarLocation.replace("\\", "/")
  def text = file(kernelIdName + '/kernel.json').text.replace(pathToReplace, jarLocation + "/*" + classPathSeparator() + pathToBaseLibs + "/*").replace(mainClassToReplace, mainClassName)
  text
}

def saveBeakerxStaticKernelJson(kernelIdName, mainClassName, pathToReplace, mainClassToReplace) {
  def kernelJson = createKernelJson(
          kernelIdName,
          pathToStaticContent() + kernelIdName + '/lib/',
          pathToReplace,
          mainClassToReplace,
          pathToStaticBaseLibs(),
          mainClassName)
  file(pathToStaticContent() + kernelIdName + "/kernel.json").withWriter { w ->
    w << kernelJson
  }
}

def copyLibsToBeakerxStatic(kernelIdName, configurations, jar) {
  copy {
    from configurations.runtime
    from jar
    into new File(pathToStaticContent(), kernelIdName + '/lib')
  }
}

def cleanBeakerxStatic(kernelIdName) {
  delete pathToStaticContent() + kernelIdName
}